			Trabalho Final - Estrutura de Dados I

	Autores: 
		-	Luiz Fernando (Luizfcneto)
		- 	Lucas Forain 

	Email:
		-	luizfcneto123@gmail.com	
		-

	Descrição:
		Implementar algoritmo para determinar os  Códigos de Huffman[1], que possui grande aplicação na área de compresão de dados.

		Utilizaremos duas classes:
			- BinMinHeap.java :

				O que é?
					- É uma classe que implementa uma fila de prioridades (Heap binária).
						Ela pode ser uma lista encadeada ou um vetor que contenha a chave  que define a prioridade da heap. Neste caso:
							- a frequencia é a chave 
							- a propriedade da chave é de minimo.
							- o vetor da fila de prioridades é de Arvore Binaria, que tem como conteudo o simbolo e a chave frequencia.

			[  |  |  |  |  |  ] 			vetor[ i ].frequencia = chave
								

				Porque utilizamos?
					- Devemos utiliza-la para selecionarmos os caracteres que tem chaves menores ( os que tem menos frequência ) como prioridade 
						para realizar o algoritmo de huffman.


				Descrição da implementação da Classe BinMinHeap:
	
			- Características:
				- private int n 				//numero de elementos presentes na heap
				- private int tamanho		//tamanho do vetor da heap
				- private ArvBin[] vetor	// vetor com os elementos 
	
	
			- Métodos Básicos: 
				- public BinMinHeap( int tamanho )				// construtor da BinMinHeap, parametro necessario é o tamanho, que define o tamanho do vetor das chaves de prioridade da Heap
				- public boolean vazia()							// retorna se a BinMinHeap está vazia, quando n = 0;
				- public refaz ( int i )								// procurar saber
				- public constroiHeap()							// procurar saber
				- public void carregaDados()					// Entrada do programa, cria uma arvore binaria para cada par de parametro ( frequencia , char ) de entrada e adiciona na HeapBinMin
				- public void aplicaHuffman()					// analisando
				- public void mostraCodigos()					// ao gerar a arvore após o aplicaHuffman, imprimiremos esta em pre-ordem levando como criterio imprimir quem é filho a esquerda tem como códio 0 e a direita 1
				- public void insere ( ArvBin x )					// insere no vetor de chaves da heap o novo elemento ( que é uma arvore binaria )
				- public removeMin( ArvBin x )					// remove do vetor de chaves da heap o elemento ( que é uma arvore binaria ) desejado.
				- public void imprime()							// imprime a arvore binaria construida em pre-ordem
	
			- Métodos que devemos acrescentar:
			

			- ArvBin.java :
				
				O que é?
					- É uma classe que implementa uma estrutura de ArvoreBinaria.
						
				Porque utilizamos?
					- Cada simbolo será uma arvore binária. 
					- A raiz irá receber o símbolo (char) e a frequencia (int) que é a chave da BinMinHeap.


				Descrição da implementação da Classe ArvBin:

				- Caraterísticas:
					- private char simbolo					// simbolo armazenado na raiz
					- private int frequencia					// frequencia em que o simbolo armazenado na raiz possui 
					- private ArvBin esquerda, direita		// referencia para as sub-arvores esquerda e direita.
		
		
				- Métodos Básicos:
					- public ArvBin( char simbolo, int frequencia )										
					- public ArvBin( char simbolo, int frequencia, ArvBin esquerda, ArvBin direita )
					- public void mostra() 
					- public void mostraCodigo() 
			
				- Métodos que devemos acrescentar:

